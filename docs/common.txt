Общий принцип

Сначала читается программный код, написанный на специальном языке.
Специально не используется какой-либо из общепринятых языков, т.к. в них много специфичных концепций, которые плохо отображаются на другие языки.
В результате формируется иерархическая структура таксонов. Причем, используется сообщество таксонов Wpp, которые специализируются для чтения.
Сообществом считается множество типов таксонов, которые относятся к одному языку.
Затем для всех таксонов вызывается update, который обычно используется для поиска связанных по имени конструкций,
н.р. для объявления переменных ищется тип, а для использования переменной - объявление переменной.
Это нельзя делать во время чтения, т.к. для поиска может потребоваться информация, которая ещё не считана.
Кроме того, проверяются различные правила.
Количество проходов может быть произвольным. Каждый таксон имеет возможность сообщить о том, что ему нужен ещё один проход update.

После окончательного формирования иерархической структуры кода можно приступить к транспиляции на другой язык.
Для этого выполняется полное клонирование иерархии с заменой таксонов на другое сообщество.
Например, таксон WppModule клонируется в CppModule.
Но для построения перекрестных ссылок требуется перейти на шаг update, т.к. требуется полная иерархия.
Кроме того, выполняются трансформации иерархии. Например в C++ модуль делится на заголовок и реализацию. Для этого таксон модуля удаляется. Но вместо него появляется таксон заголовка и (при необходимости) таксон имплементации.

И только потом выполняется экспорт в текст на целевом языке программирования. При этом происходит формирование структуры каталогов и создание соответствующих файлов.

Исходная структура Wpp-таксонов может быть повторно использована для экспорта на другой язык.