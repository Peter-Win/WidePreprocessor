{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"read",
				"readHead"
			],
			[
				"new",
				"newCore"
			],
			[
				"add",
				"addItem"
			],
			[
				"Taxon",
				"TaxonSrc"
			],
			[
				"a",
				"assertEqual"
			],
			[
				"line",
				"lineNumber"
			],
			[
				"de",
				"desiredType"
			],
			[
				"type",
				"typeExpr"
			],
			[
				"get",
				"getFinalType"
			],
			[
				"__",
				"__class__"
			],
			[
				"op",
				"opCode"
			],
			[
				"Core",
				"CoreArray"
			],
			[
				"Taxo",
				"TaxonArrayIndex"
			],
			[
				"Ta",
				"Taxon"
			],
			[
				"Array",
				"TaxonArrayIndex"
			],
			[
				"lex",
				"lexems"
			],
			[
				"make",
				"makeAttrString"
			],
			[
				"Type",
				"TypeExprCPP"
			],
			[
				"ty",
				"typeExprName"
			],
			[
				"typ",
				"typeExpr"
			],
			[
				"item",
				"itemType"
			],
			[
				"Arr",
				"ArrayType"
			],
			[
				"Tax",
				"TaxonTernaryOp"
			],
			[
				"ex",
				"expression"
			],
			[
				"ter",
				"ternar"
			],
			[
				"le",
				"lexems"
			],
			[
				"spec",
				"specWords"
			],
			[
				"spe",
				"specChars"
			],
			[
				"sp",
				"specChars"
			],
			[
				"bin",
				"binOps"
			],
			[
				"export",
				"exportString"
			],
			[
				"sr",
				"srcBlock"
			],
			[
				"cpp",
				"cppBlock"
			],
			[
				"con",
				"conditions"
			],
			[
				"else",
				"elseBlock"
			],
			[
				"Co",
				"CoreMath"
			],
			[
				"No",
				"NodeCPP"
			],
			[
				"N",
				"NodeCPP"
			],
			[
				"d",
				"declaration"
			],
			[
				"co",
				"context"
			],
			[
				"o",
				"owner"
			],
			[
				"cr",
				"createPure"
			],
			[
				"e",
				"expr"
			],
			[
				"s",
				"self"
			],
			[
				"re",
				"result"
			],
			[
				"fun",
				"funcType"
			],
			[
				"func",
				"funcType"
			],
			[
				"owner",
				"ownerFunc"
			],
			[
				"own",
				"ownerFunc"
			],
			[
				"args",
				"argsList"
			],
			[
				"Exp",
				"ExpressionCPP"
			],
			[
				"init",
				"initializationList"
			],
			[
				"attrs",
				"attrsSet"
			],
			[
				"attr",
				"attrsList"
			],
			[
				"ta",
				"taxon"
			],
			[
				"tax",
				"taxonOver"
			],
			[
				"file",
				"fileName"
			],
			[
				"di",
				"dictionary"
			],
			[
				"F",
				"FakeConstructor"
			],
			[
				"over",
				"overList"
			],
			[
				"value",
				"valueStr"
			],
			[
				"Ex",
				"TaxonExpression"
			],
			[
				"sub",
				"subType"
			],
			[
				"up",
				"updated"
			],
			[
				"ini",
				"initializationList"
			],
			[
				"is",
				"isConstructor"
			],
			[
				"C",
				"CoreCPP"
			],
			[
				"exp",
				"exportUsing"
			],
			[
				"from",
				"fromTaxon"
			],
			[
				"c",
				"currentOwner"
			],
			[
				"lexem",
				"lexems"
			],
			[
				"se",
				"second"
			],
			[
				"lexe",
				"lexemType"
			],
			[
				"ch",
				"checkBrackets"
			],
			[
				"const",
				"constType"
			],
			[
				"fi",
				"fixed"
			],
			[
				"onF",
				"onFinishLast"
			],
			[
				"cu",
				"chunks"
			],
			[
				"cmd",
				"cmdTaxon"
			],
			[
				"Err",
				"ErrClass"
			],
			[
				"Met",
				"MethodSingleCPP"
			],
			[
				"T",
				"TaxonMethod"
			],
			[
				"res",
				"resultStr"
			],
			[
				"resul",
				"resultType"
			],
			[
				"def",
				"defaultValue"
			],
			[
				"su",
				"subTaxon"
			],
			[
				"acc",
				"accessSpecifier"
			],
			[
				"Mol",
				"ModuleImplCPP"
			],
			[
				"Module",
				"ModuleHeaderCPP"
			],
			[
				"Mo",
				"ModuleHeaderCPP"
			],
			[
				"curr",
				"currentTaxon"
			],
			[
				"st",
				"stack"
			],
			[
				"cur",
				"currentTaxon"
			],
			[
				"taxon",
				"taxonStack"
			],
			[
				"margin",
				"margin-top\tproperty"
			],
			[
				"font",
				"font-weight\tproperty"
			],
			[
				"text",
				"text-align\tproperty"
			],
			[
				"tex",
				"text-align\tproperty"
			],
			[
				"des",
				"desiredMolarConc"
			],
			[
				"lin",
				"line-number"
			],
			[
				"border-bottom",
				"border-bottom-width"
			],
			[
				"li",
				"link\tTag"
			],
			[
				"ti",
				"title\tTag"
			],
			[
				"img",
				"imgIndex"
			],
			[
				"in",
				"inline-block"
			],
			[
				"va",
				"value"
			],
			[
				"lo",
				"loadFile"
			],
			[
				"Loader",
				"LoaderContext"
			],
			[
				"roo",
				"rootFile"
			],
			[
				"src",
				"srcList"
			],
			[
				"v",
				"values"
			],
			[
				"tab",
				"tablesSet"
			],
			[
				"fields",
				"fieldsList"
			],
			[
				"mea",
				"measureFields"
			],
			[
				"prod",
				"prodFields"
			],
			[
				"report",
				"reportEmptyUnits"
			],
			[
				"u",
				"unitIndexes"
			],
			[
				"unit",
				"unitIndexes"
			],
			[
				"cate",
				"categRoot"
			],
			[
				"categ",
				"categNameMap"
			],
			[
				"cat",
				"categMap"
			],
			[
				"part",
				"partitionNames"
			],
			[
				"getOw",
				"getOwnerName"
			],
			[
				"partit",
				"partitionMap"
			],
			[
				"pa",
				"partitionNames"
			],
			[
				"write",
				"writeList"
			],
			[
				"par",
				"partitionTree"
			],
			[
				"ar",
				"articulDuplucates"
			]
		]
	},
	"buffers":
	[
		{
			"file": "docs/common.txt",
			"settings":
			{
				"buffer_size": 1793,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Taxon.py",
			"settings":
			{
				"buffer_size": 1688,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Wpp/WppTaxon.py",
			"settings":
			{
				"buffer_size": 349,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/testTaxon.py",
			"settings":
			{
				"buffer_size": 1055,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "CharChem/core/Periodic.wpp",
			"settings":
			{
				"buffer_size": 376,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "CharChem/core/Visitor.wpp",
			"settings":
			{
				"buffer_size": 675,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/WidePreprocessor/src/read/testContext.py",
		"/C/WidePreprocessor/src/read/Context.py",
		"/C/WidePreprocessor/CharChem/core/ChemAtom.wpp",
		"/C/WidePreprocessor/src/allTests.cmd",
		"/C/WidePreprocessor/src/core/expression/TaxonFieldExpr.py",
		"/C/WidePreprocessor/src/core/statement/TaxonReturn.py",
		"/C/WidePreprocessor/src/core/expression/TaxonThis.py",
		"/C/WidePreprocessor/src/lang/CPP/NodeCPP.py",
		"/C/WidePreprocessor/src/lang/LangNode.py",
		"/C/WidePreprocessor/src/lang/CPP/ExpressionCPP.py",
		"/C/WidePreprocessor/src/core/expression/TaxonCall.py",
		"/C/WidePreprocessor/src/lang/CPP/TypeExprCPP.py",
		"/C/WidePreprocessor/examples/Point.wpp",
		"/C/WidePreprocessor/examples/MyPoint.wpp",
		"/C/WidePreprocessor/src/core/expression/TaxonIdExpr.py",
		"/C/WidePreprocessor/src/core/Taxon.py",
		"/C/WidePreprocessor/src/lang/CPP/StatementCPP.py",
		"/C/WidePreprocessor/src/lang/CPP/MethodCPP.py",
		"/C/WidePreprocessor/src/lang/CPP/BlockCPP.py",
		"/C/WidePreprocessor/src/lang/CPP/LocalTypeCPP.py",
		"/C/WidePreprocessor/src/core/TypeExpr.py",
		"/C/WidePreprocessor/src/core/FinalType.py",
		"/C/WidePreprocessor/src/core/TaxonCore.py",
		"/C/WidePreprocessor/src/lang/CPP/CoreCPP.py",
		"/C/WidePreprocessor/src/core/TaxonTypeScalar.py",
		"/C/WidePreprocessor/src/core/TaxonTypedef.py",
		"/C/WidePreprocessor/src/lang/CPP/ClassHeaderCPP.py",
		"/C/WidePreprocessor/src/read/readWPP.py",
		"/C/WidePreprocessor/examples/testClass.wpp",
		"/C/WidePreprocessor/src/core/expression/TaxonConst.py",
		"/C/WidePreprocessor/src/core/TaxonClass.py",
		"/C/WidePreprocessor/src/core/TaxonVar.py",
		"/C/WidePreprocessor/src/core/LocalType.py",
		"/C/WidePreprocessor/src/core/TaxonMethod.py",
		"/C/WidePreprocessor/src/core/TaxonMethodSingle.py",
		"/C/WidePreprocessor/src/core/TaxonBlock.py",
		"/C/WidePreprocessor/src/core/statement/TaxonIf.py",
		"/C/WidePreprocessor/src/core/TaxonExpression.py",
		"/C/WidePreprocessor/src/core/expression/TaxonArrayIndex.py",
		"/C/WidePreprocessor/src/core/expression/TaxonTernaryOp.py",
		"/C/WidePreprocessor/src/core/expression/TaxonBinOp.py",
		"/C/WidePreprocessor/src/lang/CPP/FieldCPP.py",
		"/C/WidePreprocessor/src/core/TaxonField.py",
		"/C/WidePreprocessor/src/core/expression/TaxonAbstractExpr.py",
		"/C/WidePreprocessor/src/core/TaxonModule.py",
		"/C/WidePreprocessor/src/core/TaxonType.py",
		"/C/WidePreprocessor/examples/test.wpp",
		"/C/WidePreprocessor/src/lang/CPP/ModuleHeaderCPP.py",
		"/C/WidePreprocessor/src/lang/OutContext.py",
		"/C/WidePreprocessor/src/lang/CPP/TypedefCPP.py",
		"/C/WidePreprocessor/src/lang/CPP/ModuleCPP.py",
		"/C/WidePreprocessor/src/lang/CPP/ModuleImplCPP.py",
		"/C/WidePreprocessor/src/core/Type.py",
		"/C/WidePreprocessor/examples/exampleConfig.txt",
		"/C/WidePreprocessor/src/core/TypeCommon.py",
		"/C/WidePreprocessor/src/process.py",
		"/C/WidePreprocessor/src/read/readWPP",
		"/C/chem/Youtube/04_Что такое временная или карбонатная жесткость/html/air-table.html",
		"/C/chem/Youtube/05a_Исследование общей и временной жесткости/05a-Salts/salts-calc.html",
		"/C/JS/ramstal-slider/style.css",
		"/C/JS/ramstal-slider/demo.html",
		"/C/chem/sulfuric.html",
		"/C/JS/canvas/index.html",
		"/C/Apache/easychem.my/charchem_src/point.js",
		"/C/UniProg/CharChem/src/main.taxon",
		"/C/UniProg/UniProg/UniProg.py",
		"/C/UniProg/UniProg/taxon.py",
		"/C/UniProg/UniProg/taxonLoader.py",
		"/C/UniProg/UniProg/LoaderCtx.py",
		"/C/UniProg/project.sublime-project",
		"/C/Apache/easychem.my/charchem_src/charchem.js.templ",
		"/C/JS/TSTest2/main.ts",
		"/C/JS/TSTest2/Point.taxon",
		"/C/backup/restore.py",
		"/C/Поездки/17-Мьянма/language/language.html",
		"/C/Поездки/17-Мьянма/plan.html",
		"/C/Поездки/17-Мьянма/language.html",
		"/C/Apache/vhod.my/data/code/trash.py",
		"/C/Apache/vhod.my/data/code/record.py",
		"/C/Apache/vhod.my/data/code/part.py",
		"/C/Apache/vhod.my/data/code/reports.py",
		"/C/Apache/vhod.my/data/code/units.py",
		"/C/Apache/vhod.my/data/export.py",
		"/C/Apache/vhod.my/data/import.py",
		"/C/Apache/vhod.my/data/code/invOwnersReport.py",
		"/C/Apache/vhod.my/data/code/__init__.py",
		"/E/WiSiter/nodejs/core/tests/core_agents_Agent.js",
		"/E/WiSiter/nodejs/core/agents/AgentStatic.js"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"TaxonArr",
			"pass",
			"'[",
			"specWords",
			"makeDecorator",
			">>>",
			"print(",
			"'call",
			"right",
			"const",
			"TaxonExpression",
			"VarCPP",
			"ExpressionCPP",
			"TaxonExpression",
			"typeRef"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "docs/common.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1793,
						"regions":
						{
						},
						"selection":
						[
							[
								451,
								451
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Taxon.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1688,
						"regions":
						{
						},
						"selection":
						[
							[
								689,
								689
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Wpp/WppTaxon.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 349,
						"regions":
						{
						},
						"selection":
						[
							[
								349,
								349
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/testTaxon.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1055,
						"regions":
						{
						},
						"selection":
						[
							[
								1039,
								1039
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "CharChem/core/Periodic.wpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 376,
						"regions":
						{
						},
						"selection":
						[
							[
								375,
								375
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "CharChem/core/Visitor.wpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 675,
						"regions":
						{
						},
						"selection":
						[
							[
								674,
								674
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 193.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"TaxVar",
				"C:\\WidePreprocessor\\src\\core\\TaxonVar.py"
			],
			[
				"TaxArr",
				"C:\\WidePreprocessor\\src\\core\\expression\\TaxonArrayIndex.py"
			],
			[
				"TaBi",
				"C:\\WidePreprocessor\\src\\core\\expression\\TaxonBinOp.py"
			],
			[
				"TaxonId",
				"C:\\WidePreprocessor\\src\\core\\expression\\TaxonIdExpr.py"
			],
			[
				"Ex",
				"C:\\WidePreprocessor\\src\\lang\\CPP\\ExpressionCPP.py"
			],
			[
				"Loca",
				"C:\\WidePreprocessor\\src\\lang\\CPP\\LocalTypeCPP.py"
			],
			[
				"TaxonBin",
				"C:\\WidePreprocessor\\src\\core\\expression\\TaxonBinOp.py"
			],
			[
				"Lo",
				"C:\\WidePreprocessor\\src\\core\\LocalType.py"
			],
			[
				"ExprI",
				"C:\\WidePreprocessor\\src\\core\\expression\\TaxonIdExpr.py"
			],
			[
				"LocT",
				"C:\\WidePreprocessor\\src\\lang\\CPP\\LocalTypeCPP.py"
			],
			[
				"Lang",
				"C:\\WidePreprocessor\\src\\lang\\LangNode.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
